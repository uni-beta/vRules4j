[2017-11-26]
1. 增强了多层extension的merge功能.
2. 增强了#{}在error message里的解析.
3. 发布 V3.3.4

[2017-05-18]
1. 优化了ruleset的解析逻辑.
2. 修改了若干bug
3. 发布 V3.3.3

[2017-03-22]
1. 优化了'contexts'的实现, 使用'name'做为key值.
2. 发布 V3.3.2

[2017-01-10]
1. 增强了extension的处理逻辑, 如果rule id相同, 会通过覆盖策略使用最新的rule
2. 增强了context的打印输出功能
3. 发布 V3.3.1

[2016-10-18]
1. 实现了对ruleset的支持, 例如
	<ruleset desc="" id="Rule">
        <rule desc="1" id="binding"/>
    </ruleset>
2. 发了了V3.3.0

[2016-05-26]
1. 修改了个别bug.
2. 发布了 V3.2.1

[2016-03-18]
1. 支持从classpath里加载rule xml 文件.
	例如, 规则文件名可以为 "com/rules/validation.xml", 会从classpath里加载.
2. 对vRules4j-Digester工具增强了泛型的序列化支持.
3. 增加了java对象绑定功能,用于对Null的校验对象自动初始化.
4. 增强了高并发下的线程安全性.
5. 发布 V3.2.0

[2016-01-21]
1. 增强了Context对数组类型的支持
2. 发布了 V3.1.7

[2015-08-13]
1. 支持通过-DvRules4j.classpath进行extra classpath的配置,例如, -DvRules4j.classpath ="D:\myclasspath"
2. 优化了动态加载性能
3. 发布V3.1.6版本

[2015-02-25]
1. 提升了ObjectSerializer.java的执行性能。
2. 发布了V3.1.5版本

[2015-01-18]
1. 优化动态代理类的解析方案
2. 发布了V3.1.4版本

[2013-11-05]
1. 修改了注册模型对象不能成功绑定的问题。
2. 修改了其他若干bugs。

[2013-05-15]
1. 修改了context内示例数据复制错误的问题
2. 修改了xml输出编码问题，设定为UTF-8格式.
3. 发布V3.1.2版本

[2013-01-22]
1. 优化了context data对primitive类型的支持。
2. 发布v3.1.1版本

[2012-12-01]
1. 发布v3.1.0版本

[2012-11-25]
1. 新增assertion配置,实现断言的true/false切换
2. 新增vRules4j模型,并实现com.unibeta.vrules.tools.Java2vRules.toXml(vRules4j, String)

[2012-11-11]
1. 将decisionObject改为decision
2. 将outputBool改为boolParam
3. 将globalConfig改为global
4. 将javaBody改为java
5. 实现了无需配置sevelet, 系统运行时自定搜索并配置classpath的升级
6. 若干细节优化

[2012-10-30]
1. 修改了jdk编译兼容性问题
2. 优化了发布包结构
3. 优化了若干细节
4. 将规则的"predicate"改为"assert", 并实现对老版本的兼容性
5. 发布v3.0.4版

[2011-04-16]
1. 修改了rules不能为null的bug.
2. 将decisionConstantDefinitions改为decisionConstants,并保证向下兼容.
3. 修改了vRules4j-Digester生成xml配置时,对接口集成关系生成冗余规则的问题.
4. 发布v3.0.3版.

[2010-10-24]
1. 修改了规则配置文件热部署失败的bug.
2. 发布v3.0.2版.

[2010-10-06]
1. 修改了决策模式不能良好支持对象级联继承决策的问题. 新的实现基于对象的继承关系,按照对象的父子关系实现了决策优先级.
	a. 子对象拥有最低优先级的决策权限,父对象拥有最高决策权限.
	b. 子对象可以申请使用直属父对象的高权限规则,不能够跨级别申请使用.
	c. 父对象规则一旦被触发,规则路由不允许被重新发回子对象的规则路径.
	d. 同一对象下的规则可以任意跳转,没有任何限制.
2. 发布v3.0.1版.

[2010-08-22]
1. v3.0.0.beta验证通过.
2. 发布v3.0.0.正式版.

[2010-07-30]
1. 实现了includes中的文件修改后自动加载的功能.
2. 重构了Java2vRules的实现.
3. 增加了copyFile的功能.
4. 修改了规则文件修改时间维护的缺陷.
5. 升级v3.0.0.beta版本.	

[2010-07-27]
1.修改了Map不能注册errorObject的问题.
2.修改了Includes下的decisionObject不能被重用,原因是由于included的时候没有注册decisionObject class.
3.实现了决策引擎内核.
4.重构了低层结构.
5.发布v3.0.0.beta版本.

[2010-07-25]
1. 解决了class name重名导致校验冲突的问题.
2. 实现了校验对象对多接口的支持.
3. 发布v2.3.4版本.

[2010-07-20]
1. 重构了数组对象校验的聚合逻辑,实现了数组对象校验过程跨对象的关联校验.
2. 重构了校验接口代理层的实现.
3. 发布v2.3.3版本.	

[2010-07-18]
1. 重构了vRules4j-Digester的部分代码.
2. 实现了规则文件递归引用的自动检测功能,避免循环嵌套导致校验引擎内部死锁的隐患.
3. 发布v2.3.2版本.	    

[2010-07-16]
1.修改了规则文件includes功能的bug.
2.实现了DecisionObject内部String属性的常量定义功能.该功能类似于C语言中的宏定义,它只是在编译时进行简单的String常量替换.
	<decisionConstantDefinitions>
    		<definition name="" value=""/>
	</decisionConstantDefinitions>
	a).decisionConstantDefinitions 内的definition只是在编译时对decisionObject内的String类型的值进行等价替换.
	b).<definition name="" value=""/>中的name建议遵循java常量的命名规范,vRules在编译时如果发现decisionObject内的属性值等于
	    name,那么系统将会将name替换为value并最终作为返回结果返回给用户.
3.发布v2.3.1版本.	 

[2009-09-08]
	1.实现了depends使用java逻辑运算符进行表达的功能.逻辑运算结果返回boolean值,运算符支持@and, @or, !和==.
	2.发布v2.2.2版本.

[2009-09-05]
	1.实现了规则执行顺序编排的功能.执行顺序依次是1 2 3....
	2.实现了断点支持功能, 当breakpoint = "on" 或者"true" 时,当前规则执行失败后停止当前校验分支的执行.
	3.实现了规则间的depends功能:
		a)只能depends当前对象的规则,不能跨对象依赖.
		b)sequence排在前面的规则不依赖于其之后的规则.例如,sequence=1的不能依赖于sequence=3的规则.
	4.将errorObject改为decisionObject,并保证对旧版本中errorObject的兼容性.
	5.发布v2.2.1版本		

[2009-06-21]
	1.增强了attributes配置对java bean中属性首字母大小写兼容的功能. 例如: name和Name代表java bean中的同一个属性.
	5.发布了v2.1.2版本
	
[2009-06-20]
	1.新增了validate(java.util.Map<java.lang.String,java.lang.Object> objMap, java.lang.String fileName)服务.
	2.新增了validate(java.util.Map<java.lang.String,java.lang.Object> objMap, java.lang.String fileName, java.lang.Object errorObj) 服务.
	3.实现了校验运行时对多对象contexted校验的支持。
	4.规则配置中新增了<contexts/>配置.
		<contexts>
		    <context className="" name=""/>
		    <context className="" name=""/>
 		</contexts>
 		
 		通过上述配置, name将会在运行时全局有效, 其他任意规则都可以灵活应用对应对象的实例.
	5.发布了v2.1.2.b1版本

[2009-05-28]
	1.增强了校验过程对外部应用程序异常/错误的兼容能力.
	2.发布了v2.1.1版本.
	
[2009-05-23]
	1.将rule下的inputObjects改名为attributes,并且保证新版本对老配置中inputObjects的兼容.
	2.发布了v2.1.0版本.
	
[2009-05]
	1.实现了vRules对接口模型的支持功能.
	2.Java2vRules实现了解析接口类并转化为vRules规则文件的功能.
	3.将rule下的inputObjects元素由必填改为可选.
	
[2009-03-25]
	1. 更新了vRules4j的英文文档.
	2. 发布了v2.0.9
[2009-02-15]
	1. 为规则配置新增了内置关键字root. 
	    root是vRules4j内置的关键字, 在规则定义时,通过root可以即时引用当前校验对象实体的实例. 
            root关键字的作用域只作用与当前校验实体object范围内.它等同于java语法中的this关键字以获得当前校验对象下的属性或者方法.
	2. 发布v2.0.8

[2008-11-16]
	1. 实现了@XmlElementWrapper(name = "")声明属性name的功能,优先使用getXXX方法的声明.
	2. 为object entity和rule新增了name属性,xpath可以通过name配置实现灵活定义.
	3. 实现了校验过程实时返回错误数据的功能.
	5. 新增了globalConfig下displayErrorValue的节点,实现了校验过程返回错误数据的可选功能.
	4. 发布v2.0.7

[2008-10-04]
	1. 修改了多参数关联校验时,规则中含有空格时报错的bug.
	2. 升级了v2.0.6版本.

[2008-09-21]
    1. 优化了校验引擎的静态实例管理,提高了校验性能.
    2. 发布了v2.0.6版本.

[2008-06-22]
	1. 实现了unix与windows下classpath分隔符的可配置性。
	2. vRules4j可以灵活引用所有WEB-INF\lib下的jar或zip包文件。
	3. 发布了v2.0.5版本。
	新的servlet配置可以为：
	<servlet>
		<servlet-name>vRules4jServlet</servlet-name>
		<servlet-class>
			com.unibeta.vrules.servlets.VRules4jServlet
		</servlet-class>
		<init-param>
		<!-- environment of current container server depolied on.
			The optional values are below:
		     0: stands for windows operation system
		     1: stands for unix/linux operation system
		     
		     The default value is 1, which indicates it is used on unix or linux operation system.
		-->
			<param-name>environment</param-name>
			<param-value>1</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

[2008-06-13]
	1. 修改了多线程并发会导致程序异常的安全隐患. 增强了线程安全性.
	2. 发布了v2.0.4版本.
	
[2008-06-05]
	1. 实现了vRules4j-Digester对特殊属性名称分析兼容的功能.

[2008-06-03]
	1. 升级了校验内核到1.0.0版本. 2.x系列与1.x系列使用了相同的引擎内核.
	2. 将nill元素更改为nillable,并且重新定义了该元素的功能意义. nillable：【可选】描述该对象是否可为空。默认值是false.如果nillable=true则允许该对象为null,而且当值为null时跳过该对象的校验过程;反之,如果nillable=false则不允许该对象为null,当值为null时会生成校验错误信息.
	3. 修改了vRules4j-Digester对complexed对象生成规则默认isMaporList= "true"的bug.
	4. 发布了2.0.3版本.