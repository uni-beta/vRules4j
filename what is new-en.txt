[2020-11-06]
1. Added '-DvRules4j.springboot' to support springboot startup in runtime, for example: -DvRules4j.springboot=D:\springboot-app-0.0.1-SNAPSHOT.jar
2. Added '-DvRules4j.enableprint=false' arg in JVM to disable 'println()' and 'print()' functions' standard output.
3. Added '-DvRules4j.ruleFileModifiedBeatsCheckInterval=60' arg in JVM to specify rule rile modified beats checking interval, time unit is seconds.
4. Enhanced thread safety and performance
5. Upgraded log4j to slf4j
6. Upgrade to maven project
7. Refined encoding
8. Released V3.4.0

[2019-11-03]
1. Refined runtime context values setting via key by default .
2. Released V3.3.7

[2019-07-25]
1. Refined the naming convention for compiled class and method name.
2. Released V3.3.6

[2019-05-30]
1. Added com.unibeta.vrules.tools.CommonSyntaxs.setEnablePrint(boolean) for println() printing management。
2. Improved performance
3. Compiled binary class can be separated by pid of JVM
4. Released V3.3.5

[2017-11-26]
1. Enhanced rule's merging for multiple layer's extension
2. Enhanced #{} java expression parsing in error message
3. Released V3.3.4

[2017-05-12]
1. Refined ruleset parsing logic.
2. Fixed some bugs.
3. Released V3.3.3

[2017-03-22]
1. Refined 'contexts' implementation, use 'name' as the unique key.
2. Released V3.3.2

[2017-01-10]
1. Refined 'extension' processing logic with rule override if rule id is the same.
2. Enhanced context logging in #{}
3. Released V3.3.1

[2016-10-18]
1. Added ruleset support, for example:
	<ruleset desc="" id="Rule">
        <rule desc="" id="binding"/>
    </ruleset>
2. Released V3.3.0

[2016-08-18]
1. Fixed few bugs.
2. Released V3.2.2

[2016-05-26]
1. Fixed few bugs.
2. Released V3.2.1

[2016-03-18]
1. Rule file defined in jar as resource can be supported. 
	eg, input file name can be "com/rules/validation.xml", it can be loaded from classpath or jar file as resource stream.
2. Enhanced the support of generic type for vRules4j-Digester tool.
3. Add "Object Binding" function with "enableBinding" flag. Create new instance if meet null Object node, so that to fill the null value for input object.
4. Enhanced the concurrence capacity in thread safety.
5. Release V3.2.0

[2016-01-21]
1. Enhanced context type support for array.
2. Release V3.1.7

[2015-09-05]
1. extra classpath configuraiton supported by -DvRules4j.classpath, eg, -DvRules4j.classpath ="D:\myclasspath"
2. Optimized dynamic class loading performance.
3. Release V3.1.6

[2015-02-25]
1. Improved the performance of ObjectSerializer.java
2. Release V3.1.5

[2015-01-18]
1. Refined dynamic proxy's class digesting solution.
2. Release V3.1.4

[2013-11-05]
1. Fixed the register object can not be combined issue.
2. Fixed some other bugs.

[2013-05-15]
1. Fixed object instance assignment issue in context.
2. Fixed xml output encoding issue, always in UTF-8 format.
3. Release V3.1.2 version

[2013-01-22]
1. Refined primitive support for context data.
2. java statement supported in errorMessage, e.g, #{"String value".toString()}
3. Release V3.1.1 version

[2012-12-01]
1. Release V3.1.0 version

[2012-11-25]
1. Added 'assertion' in global,support assertion logic switch.
2. Added vRules4j model,realized com.unibeta.vrules.tools.Java2vRules.toXml(vRules4j, String)

[2012-11-11]
1. Change 'decisionObject' to 'decision' 
2. Change 'outputBool' to 'boolParam'
3. Change 'globalConfig' to 'global'
4. Change 'javaBody' to 'java'
5. Refined classpath searching arithmetic
6. Some bug fixing


[2012-10-30]
1. Fixed JDK runtime compiling compatible issue.
2. Refined the release package structure
3. Have some detailed optimization 
4. Changed rule element from "predicate" to "assert", also make sure old rules are still compatible
5. Released V3.0.4

[2011-04-16]
1. Fixed some robust bugs.
2. Changed the tag name from decisionConstantDefinitions to decisionConstants 
3. Enhanced the vRules4j-Digester tool for interface multiple extensions xml generation. The generated rules are much more clear and reflect the Class extension strucutre closely.
4. Released.V3.0.3 version 

[2010-10-24]
1 Fixed Hot Deployment issue of rule configuration file updated.
2 Released v3.0.2 version 

[2010-10-06]
1. Modified the decision-making model that can well support object cascade inherited decision-making scenario.
	a. Super object's decision rule can not be sent back to child object any more, once it is triggered. 
	b. Super object always has high authority for decision making. 
	c. Child object can apply super rule of super object, but super object can not apply child's rules. 
	d. There is none restriction in the same object scope.
2. Released v3.0.1 official version.

[2010-08-22]
1. V3.0.0.beta verified by.
2. Release v3.0.0. The official version.

[2010-07-30]
1. To achieve the revised document includes the automatic loading function.
2. Reconstruct Java2vRules implementation.
3. Increased copyFile function.
4. Modify the rules file modification time for maintenance defects.
5. V3.0.0.beta version upgrade.

[2010-07-27]
1. Modified the Map can not be registered errorObject problem.
2. Modify Includes decisionObject can not be reused under, due to the time included not registered decisionObject class.
3. To achieve the decision-making engine core.
4. Reconstruction of the stratum structure.
5. Release v3.0.0.beta version

[2010-07-25]
1. Resolved the class name check duplicate names cause conflict.
2. Implemented the calibration object on the multi-interface support.
3. Release v2.3.4 version.

[2010-07-20]
1. Refactored the array object aggregation logic verification, validation process achieved an array of objects associated with inter-object validation.
2. Refactored the Interface agent layer checksum to achieve.
3. Released v2.3.3 version.

[2010-07-18]
1. Reconstructed vRules4j-Digester part of the code.
2. Implemented the deadlock detecking function, to avoid the nesting cycle of the engine leading to internal deadlock check the hidden dangers.
3. Released v2.3.2 version.

[2010-07-16]
1. Modified the rules file includes functional bug.
2. Realized DecisionObject constants defined within the String property. This enhancement is similar to C language macro definition, it is only at compile time, a simple String constant replacement.
<decisionConstantDefinitions>
    <definition name="" value=""/>
</ DecisionConstantDefinitions>
a). decisionConstantDefinitions compiled within the definition only when decisionObject the String type is equivalent to replacement value.
b). <definition name="" value=""/> the name proposed to follow java naming constants, vRules found in the compilation is that if the property value is equal to decisionObject
name, then the system will replace the name as the return value and the final result returned to the user.
3. Release v2.3.1 version.

[2009-09-08] 
 1. Realized depends logical operator to use java, express function. Logical operation results are returned boolean value, operator support @ and, @ or,!, And ==. 
 2. Release v2.2.2 version. 

 [2009-09-05] 
 1. To achieve the rule execution sequence scheduling functions. The implementation of the order is 123 .... 
 2. Achieved a breakpoint support, when the breakpoint = "on" or "true", the current rules are executed after the failure to stop the implementation of the current calibration branch. 
 3. To achieve the rule depends between the functions: 
 a) the rules of the current object only depends can not be inter-object dependency. 
 b) sequence the top surface following the rules do not rely on its rules. For example, sequence = 1 can not be dependent on the sequence = 3 rules. 
 4. ErrorObject into the decisionObject, and to ensure compatibility with older versions of errorObject. 
 5. Release v2.2.1 version

 [2009-06-21] 
 1. Enhanced attributes of the java bean attribute to configure the first letter of case-compatible functions. For example: name and Name on behalf of java bean in the same property. 
 5. Released a v2.1.2 version of the 
 
 [2009-06-20] 
 1. Added validate (java.util.Map <java.lang.String,java.lang.Object> objMap, java.lang.String fileName) services. 
 2. Added validate (java.util.Map <java.lang.String,java.lang.Object> objMap, java.lang.String fileName, java.lang.Object errorObj) services. 
 3. Implements run-time verification of multi-object contexted checksum support. 
 4. <contexts/> Rule configuration to add the configuration. 
 <contexts> 
 <context className="" name=""/> 
 <context className="" name=""/> 
  </ contexts> 
  
  Through this configuration, name will be the overall run-time efficient, other arbitrary rules can be flexible application of the corresponding instance of the object. 
 5. V2.1.2.b1 version released 

 [2009-05-28] 
 1. Enhanced verification process on an external application exception / errors compatibility. 
 2. Released the v2.1.1 version. 
 
 [2009-05-23] 
 1. InputObjects under the rule renamed attributes, and to ensure that the new version of the old configuration inputObjects compatible. 
 2. Released the v2.1.0 version.

 [2009-05] 
 1. VRules implements the support functions of the interface model. 
 2.Java2vRules implements parsing interface class and into vRules rules file functions. 
 3. InputObjects under the elements of the rule change by the required option. 
 
 [2009-03-25] 
 1. VRules4j updated English version of the document. 
 2. V2.0.9 released 
 [2009-02-15] 
 1. To rule configuration added a built-in keyword root. 
 root is vRules4j built-in keywords defined in the rules, through root can instantly check an object reference to the current entity instance. 
             The scope only to the role of root keyword verification entity object with the current range. It is equivalent to java syntax of this keyword to get the property under the current calibration object or method. 
 2. Release v2.0.8 

 [2008-11-16] 
 1. Implements @ XmlElementWrapper (name = "") declaration attribute name of the function, priority getXXX method statement. 
 2. For the object entity and the rule added a name attribute, xpath can be configured to achieve a flexible definition of name. 
 3. Realized the real-time verification process returns an error data. 
 5. GlobalConfig added to the node under displayErrorValue to realize the data validation process returns an error optional features. 
 4. Release v2.0.7 

 [2008-10-04] 
 1. Amend a number of parameters associated with validation, the rule contains spaces when Baocuo the bug. 
 2. Upgraded version v2.0.6. 

 [2008-09-21] 
     1. Optimizes the engine's static instance of check management and improve the performance of the check. 
     2. Released the v2.0.6 version. 

 [2008-06-22] 
 1. Realized unix and windows that can be under the classpath separator configurable. 
 2. VRules4j flexibility in reference to all the WEB-INF \ lib under the jar or zip package files. 
 3. Released the v2.0.5 version. 
 The new servlet configuration can be as follows: 
 <servlet> 
 <servlet-name> vRules4jServlet </ servlet-name> 
 <servlet-class> 
 com.unibeta.vrules.servlets.VRules4jServlet 
 </ servlet-class> 
 <init-param> 
 <! - Environment of current container server depolied on. 
 The optional values are below: 
 0: stands for windows operation system 
 1: stands for unix / linux operation system 
 
 The default value is 1, which indicates it is used on unix or linux operation system. 
 - " 
 <param-name> environment </ param-name> 
 <param-value> 1 </ param-value> 
 </ init-param> 
 <load-on-startup> 1 </ load-on-startup> 
 </ servlet> 

 [2008-06-13] 
 1. Modified the concurrent multi-threaded programs will lead to abnormal security risk. Enhanced thread-safe. 
 2. Released the v2.0.4 version.

 [2008-06-05] 
 1. Realized vRules4j-Digester analysis is compatible with the attribute name for special functions. 

 [2008-06-03] 
 1. Upgraded the kernel to the 1.0.0 version of the check. 2.x series and 1.x series uses the same engine core. 
 2. Nill element will change the nillable, and re-define the functional significance of the element. Nillable: 【】 optional description of whether the object is empty. The default value is false. If the nillable = true then allow the object is null, and if the value is null when the object to skip the validation process; the other hand, if the nillable = false is not allowed in the object is null, when the value is null when the will generate the checksum error message. 
 3. Modified vRules4j-Digester object build rules on the complexed default isMaporList = "true" the bug. 
 4. Released 2.0.3 version.